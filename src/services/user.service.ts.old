import {UserService} from '@loopback/authentication';
import {UserRepository} from '../repositories/user.repository';
import {User, UserWithRelations} from '../models';
import {inject} from '@loopback/core';
import {repository} from '@loopback/repository';
import {HttpErrors} from '@loopback/rest';
import {securityId, UserProfile} from '@loopback/security';
import {promisify} from 'util';
import {Credentials} from '@loopback/authentication-jwt';
const jwt = require('jsonwebtoken');

export class MyUserService implements UserService<User, Credentials> {
  constructor(
    @repository(UserRepository) public userRepository: UserRepository,
  ) { }

  async verifyCredentials(credentials: Credentials): Promise<User> {
    const foundUser = await this.userRepository.findOne({
      where: {email: credentials.email},
    });

    if (!foundUser) {
      throw new HttpErrors.NotFound('User not found');
    }

    if (foundUser.password !== credentials.password) {
      throw new HttpErrors.Unauthorized('Password is not correct');
    }

    return foundUser;
  }

  convertToUserProfile(user: User): UserProfile {
    return {
      [securityId]: user.id!.toString(),
      name: user.email,
    };
  }

  async generateToken(userProfile: UserProfile): Promise<string> {
    const token = jwt.sign(userProfile, 'your-secret-key', {
      expiresIn: '7h',
    });
    return token;
  }
}


